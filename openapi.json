{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Account-Service Spec",
    "termsOfService": "https://example.com/terms/",
    "contact": {
      "email": "contact@example.com",
      "url": "http://example.com/contact"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://logo.clearbit.com/bhinnekalife.com"
    },
    "description": "This is an **example** API to demonstrate features of OpenAPI specification\n# Introduction\nThis specification is intended to to be a good starting point for describing your API in\n[OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).\nIt also demonstrates features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo) tool and \n[ReDoc](https://github.com/Rebilly/ReDoc) documentation engine. So beyond the standard OpenAPI syntax we use a few \n[vendor extensions](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThe goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which\nallows both humans and computers to discover and understand the capabilities of the service without access to source\ncode, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can \nunderstand and interact with the remote service with a minimal amount of implementation logic. Similar to what\ninterfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.\n\n\n\n# Pagination(limit and skip)\n\n```\nPATH:  basepath/user/find\n{\n  \"filter\": {},\n  \"options\": {\n    \"limit\": 10,\n    \"sort\": {},\n    \"skip\": 0\n  }\n}\n```\n\nreturn total = total rows\n\n# Sorting by login ASC\n```\n{\n  \"filter\": {},\n  \"options\": {\n    \"limit\": 10,\n    \"sort\": {\"login\":1},\n    \"skip\": 0\n  }\n}      \n\n```\n\n# Sorting by login DESC\n```\n{\n  \"filter\": {},\n  \"options\": {\n    \"limit\": 10,\n    \"sort\": {\"login\":-1},\n    \"skip\": 0\n  }\n}      \n\n```\n\n# Full text search\n```\n{\n  \"filter\": {},\n  \"options\": {\n    \"limit\": 10,\n    \"sort\": {\"login\":1},\n    \"skip\": 0\n  }\n}      \n\n```\n\nother queries use standard mongodb query\n\nUNLICENSED\n"
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations"
    },
    {
      "name": "Message",
      "description": "Operations about message"
    },
    {
      "name": "Role",
      "description": "Operations about user roles"
    },
    {
      "name": "Todo",
      "description": "Operations TaskList"
    },
    {
      "name": "User",
      "description": "User Operations"
    }
  ],
  "servers": [
    {
      "url": "http://example.com/api/v1"
    },
    {
      "url": "https://example.com/api/v1"
    }
  ],
  "paths": {
    "/auth/keychange": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Authentication",
        "description": "Account service Auth",
        "operationId": "addAuth",
        "parameters": [
          {
            "in": "header",
            "name": "req",
            "description": "Example Value Model",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "401": {
            "description": "AuthError"
          },
          "500": {
            "description": "SystemError"
          }
        }
      }
    },
    "/auth/salt": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "get salt",
        "description": "",
        "operationId": "auth salt",
        "parameters": [
          {
            "in": "header",
            "name": "req",
            "description": "Example Value Model",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "InvalidRequest"
          },
          "401": {
            "description": "AuthError"
          },
          "403": {
            "description": "ForbidenError"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "4XX": {
            "description": "UserBlockError"
          }
        }
      }
    },
    "/auth": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "login",
        "description": "",
        "operationId": "userLogin",
        "parameters": [
          {
            "in": "header",
            "name": "req",
            "description": "Example Value Model",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "InvalidRequest"
          },
          "401": {
            "description": "AuthError"
          },
          "403": {
            "description": "ForbidenError"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "4XX": {
            "description": "UserBlockError"
          }
        }
      },
      "delete": {
        "tags": [
          "Auth"
        ],
        "summary": "logout",
        "description": "",
        "operationId": "userLogout",
        "parameters": [
          {
            "in": "header",
            "name": "req",
            "description": "Example Value Model",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "invalidRequest"
          },
          "401": {
            "description": "AuthError"
          },
          "500": {
            "description": "Internal Server error"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "refresh",
        "description": "",
        "operationId": "refreshAuth",
        "parameters": [
          {
            "in": "header",
            "name": "req",
            "description": "Example Value Model",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "invalidRequest"
          },
          "401": {
            "description": "AuthError"
          },
          "403": {
            "description": "ForbiddenError"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "4XX": {
            "description": "UserBlockError"
          }
        }
      }
    },
    "/auth/verify": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Verify User Authentification",
        "description": "",
        "operationId": "",
        "parameters": [
          {
            "in": "header",
            "name": "req",
            "description": "Example Value Model",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/auth/user": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "get current user",
        "description": "",
        "operationId": "AuthUser",
        "parameters": [
          {
            "in": "header",
            "name": "req",
            "description": "Example Value Model",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "InvalidRequest"
          },
          "401": {
            "description": "AuthError"
          },
          "403": {
            "description": "ForbidenError"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/2fa": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "request2FA",
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "req",
            "description": "Example Value Model",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "InvalidRequest"
          },
          "401": {
            "description": "AuthError"
          },
          "403": {
            "description": "ForbiddenError"
          },
          "500": {
            "description": "InternalServerError"
          }
        }
      }
    },
    "/auth/2fa/{token}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "request2FA",
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "req",
            "description": "Example Value Model",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          },
          {
            "in": "path",
            "name": "token",
            "required": true,
            "content": {
              "text/plain": {
                "example": "1NHsUvcw1bRcDo"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "InvalidRequest"
          },
          "401": {
            "description": "AuthError"
          },
          "403": {
            "description": "ForbiddenError"
          },
          "500": {
            "description": "SystemError"
          }
        }
      }
    },
    "/auth/validate2fa": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "validateToken2FA",
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "req",
            "description": "Example Value Model",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "InvalidRequest"
          },
          "401": {
            "description": "AuthError"
          },
          "403": {
            "description": "ForbiddenError"
          },
          "500": {
            "description": "InternalServerError"
          }
        }
      }
    },
    "/message/ID{id}": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "Get Message by ID",
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "text/plain": {
                "example": "37dgh4397sq"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok"
          }
        }
      },
      "delete": {
        "tags": [
          "Message"
        ],
        "summary": "Delete message by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "text/plain": {
                "example": "37dgh4397sq"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/message": {
      "post": {
        "tags": [
          "Message"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/message/ID{id}/archive": {
      "post": {
        "tags": [
          "Message"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/message/ID{id}/unarchive": {
      "post": {
        "tags": [
          "Message"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unarchived"
          }
        }
      }
    },
    "/message/findOne": {
      "post": {
        "tags": [
          "Message"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/message/find": {
      "post": {
        "tags": [
          "Message"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/message/clean": {
      "post": {
        "tags": [
          "Message"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/role/privileges": {
      "get": {
        "tags": [
          "Role"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/role/ID{id}": {
      "get": {
        "tags": [
          "Role"
        ],
        "summary": "Get Role by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "Role"
        ],
        "summary": "Create Roles",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "Role"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/role": {
      "post": {
        "tags": [
          "Role"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "role",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/role/findOne": {
      "post": {
        "tags": [
          "Role"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/role/find": {
      "post": {
        "tags": [
          "Role"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/todo/ID{id}": {
      "get": {
        "tags": [
          "Todo"
        ],
        "summary": "Get Todo by ID",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "text/plain": {
                "example": "bfdh24219"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "Todo"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "text/plain": {
                "example": "bfdh24219"
              }
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "example": {
                "$set": {},
                "$inc": {},
                "$push": {},
                "$pull": {},
                "$unset": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "Todo"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "text/plain": {
                "example": "bfdh24219"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "example": "{\n\"deletedCount\": 0\n}"
              }
            }
          }
        }
      }
    },
    "/todo": {
      "post": {
        "tags": [
          "Todo"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "req",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/todo/clean": {
      "post": {
        "tags": [
          "Todo"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "req",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/todo/clean/REF{ref}": {
      "post": {
        "tags": [
          "Todo"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ref",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": "{ test model }"
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "example": "{}"
              }
            }
          }
        }
      }
    },
    "/todo/del": {
      "post": {
        "tags": [
          "Todo"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "req",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/todo/claim/ID{id}": {
      "get": {
        "tags": [
          "Todo"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "text/plain": {
                "example": "bfdh24219"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/todo/assign/ID{id}": {
      "post": {
        "tags": [
          "Todo"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "text/plain": {
                "example": "bfdh24219"
              }
            }
          },
          {
            "in": "query",
            "name": "assign",
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/todo/findone": {
      "post": {
        "tags": [
          "Todo"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/todo/find": {
      "post": {
        "tags": [
          "Todo"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/todo/REF{id}": {
      "delete": {
        "tags": [
          "Todo"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "application/json": {
                "example": "321dsa831fh"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/todo/syncTodo": {
      "get": {
        "tags": [
          "Todo"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/keychange": {
      "post": {
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/agent": {
      "post": {
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/externalAdmin": {
      "post": {
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/activate": {
      "post": {
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/activateConfirmation": {
      "post": {
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/ID{id}/unblock": {
      "post": {
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "application/json": {
                "example": "hdai38qwu"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/ID{id}/deactivate": {
      "post": {
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "application/json": {
                "example": "hdai38qwu"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/salt": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "getSalt",
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/changePassword": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Change Password",
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/resetPassword": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset Password",
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/resetPasswordConfirm": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset Password Confirm",
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/ID{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "application/json": {
                "example": "ndd83924d"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "application/json": {
                "example": "ndd83924d"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "application/json": {
                "example": "ndd83924d"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/ID{id}/basic": {
      "get": {
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "text/plain": {
                "example": "dsahe287"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/L{login}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User by login",
        "parameters": [
          {
            "in": "path",
            "name": "login",
            "required": true,
            "content": {
              "text/plain": {
                "example": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/{oneSignal}": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get User By Signal",
        "parameters": [
          {
            "in": "path",
            "name": "oneSignal",
            "required": true,
            "content": {
              "text/plain": {
                "example": "oneSignal"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/findOne": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "get User By Signal",
        "parameters": [
          {
            "in": "query",
            "name": "findOne",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/find": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get User By ID",
        "parameters": [
          {
            "in": "query",
            "name": "find",
            "required": true,
            "content": {
              "text/plain": {
                "example": "request body"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/sign": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get User By ID",
        "parameters": [
          {
            "in": "query",
            "name": "sign",
            "required": true,
            "content": {
              "text/plain": {
                "example": "sign"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/verify/{signature}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User By ID",
        "parameters": [
          {
            "in": "path",
            "name": "signature",
            "required": true,
            "content": {
              "text/plain": {
                "example": "signature"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "verify user signature",
        "parameters": [
          {
            "in": "path",
            "name": "signature",
            "required": true,
            "content": {
              "text/plain": {
                "example": "signature"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/sendMail": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User sendmail",
        "parameters": [
          {
            "in": "query",
            "name": "sendMail",
            "required": true,
            "content": {
              "text/plain": {
                "example": "id"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/register/ID{id}/{type}/pic": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "upload picture",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "text/plain": {
                "example": "id"
              }
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "content": {
              "text/plain": {
                "example": "id"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "get uploaded picture",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "text/plain": {
                "example": "id"
              }
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "content": {
              "text/plain": {
                "example": "id"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user/ID{id}/{type}/pic": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "upload picture",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "text/plain": {
                "example": "id"
              }
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "content": {
              "text/plain": {
                "example": "type"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "get uploaded picture",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "content": {
              "text/plain": {
                "example": "id"
              }
            }
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "content": {
              "text/plain": {
                "example": "type"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/echo": {
      "post": {
        "tags": [
          "Echo"
        ],
        "summary": "Echo test",
        "description": "Receive the exact message you've sent",
        "operationId": "echo",
        "security": [
          {
            "api_key": []
          },
          {
            "basic_auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "$ref": "#/components/headers/ExpiresAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "response": {
                    "value": "Hello world!"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "example": "Hello world!"
              }
            },
            "application/xml": {
              "schema": {
                "type": "string",
                "example": "Hello world!"
              }
            }
          },
          "description": "Echo payload",
          "required": true
        },
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "API.v1.Echo echo = new API.v1.Echo();\necho.message = \"Hello World!\");\nEchoResponse response = echo.post();\nif (response.statusCode == HttpStatusCode.Created)\n{\n  // Success\n}\nelse\n{\n  // Something wrong -- check response for errors\n  Console.WriteLine(response.getRawResponse());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$form = new \\API\\Entities\\Echo();\n$form->setMessage(\"Hello World!\");\ntry {\n    $pet = $client->echo()->post($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Email": {
        "description": "User email address",
        "type": "string",
        "format": "test",
        "example": "john.smith@example.com"
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "description": "User supplied username",
            "type": "string",
            "minLength": 4,
            "example": "John78"
          },
          "firstName": {
            "description": "User first name",
            "type": "string",
            "minLength": 1,
            "example": "John"
          },
          "lastName": {
            "description": "User last name",
            "type": "string",
            "minLength": 1,
            "example": "Smith"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        }
      },
      "Keychange": {
        "type": "object",
        "properties": {
          "keyparams": {
            "type": "string",
            "example": "{}"
          }
        }
      },
      "SystemErrorName": {
        "type": "string",
        "enum": [
          "Array"
        ]
      },
      "SystemError": {
        "properties": {
          "name": {
            "type": "string",
            "$ref": "#/components/schemas/SystemErrorName"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "AuthError": {
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "AuthError",
              "TokenNotFound",
              "InvalidToken",
              "InvalidRefreshToken",
              "InvalidUserName",
              "InvalidPassword",
              "Require2FA",
              "Invalid2FA",
              "RequireCaptcha",
              "InvalidCaptcha",
              "InvalidClientKey",
              "RepeatSequence"
            ]
          },
          "message": {
            "type": "string"
          }
        }
      },
      "GetSalt": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "KeychangeRequest": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "InvalidRequestErrorName": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "InvalidRequestError": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ForbidenErrorValue": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ForbidenError": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UserBlockErrorName": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UserBlockErrorValue": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UserBlockError": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "GetSaltRequest": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "TokenResponse": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "LoginRequest": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "RefreshRequest": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Validate2FARequest": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UserRef": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Message": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UpdateResponse": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "QueryOptions": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ModelQuery": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PartialListMessage": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "DeleteResponse": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PrivilegeSchema": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ResourcePrivilege": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "AccessPrivilege": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Privileges": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Role": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "RoleCreate": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UpdateRequest": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PartialListRole": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Todo": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "TodoCreate": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "CleanRequest": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "DeleteRequest": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Assign": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PartialListTodo": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UserKeychange": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "InsertResponse": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ValidationErrorValue": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ValidationFieldErrorValue": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ValidationFieldError": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "DuplicateDataErrorName": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "DuplicateDataErrorValue": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "DuplicateDataError": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "DuplicateFieldErrorName": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "DuplicateFieldErrorValue": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "DuplicateFieldError": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "CreateAgent": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "CreateExternalAdmin": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UserActivation": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UserActivateConfirmation": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "SimpleResponse": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ChangePassword": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "ResetPassword": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "OneSignalID": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PartialListUser": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "SendMail": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UploadPicResponse": {
        "properties": {
          "name": {
            "type": "string"
          }
        }
      }
    },
    "headers": {
      "ExpiresAfter": {
        "description": "date in UTC when token expires",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "securitySchemes": {
      "main_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://example.com/api/oauth/dialog",
            "scopes": {
              "read:users": "read users info",
              "write:users": "modify or remove users"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api_key"
      },
      "basic_auth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
